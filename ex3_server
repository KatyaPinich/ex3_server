#!/usr/local/bin/python3 -tt

import sys
from pathlib import Path
from socket import socket

LOAD_BALANCER_PORT_FILE = './server_port'
RECEIVE_BUFFER_SIZE = 1024
HTTP_MESSAGE_END = '\r\n\r\n'
HTTP_LINE_END = '\r\n'
HTTP_RESPONSE_HEADER_TEMPLATE = 'HTTP/{} {} {}\r\nContent-Type: text/html\r\nContent-Length: {}\r\n\r\n'
COUNTER_RESPONSE_BODY_TEMPLATE = '{}\r\n\r\n'
ERROR_404_MESSAGE = '<html><head><title>Not Found</title></head><body>\r\nSorry, the object you requested was not found.\r\n</body></html>\r\n\r\n'

def format_http_header(version: str, status: int, status_text: str, content_length: int) -> str:
    return HTTP_RESPONSE_HEADER_TEMPLATE.format(version, status, status_text, content_length)


def format_counter_response(requests_count: int) -> str:
    content_length = len(str(requests_count))
    header = format_http_header('1.0', 200, 'OK', content_length)
    body = COUNTER_RESPONSE_BODY_TEMPLATE.format(requests_count)
    return header + body


def format_error_response() -> str:
    header = format_http_header('1.1', 404, 'Not Found', 113)
    return header + ERROR_404_MESSAGE


def get_lb_port(lb_port_filename: str = LOAD_BALANCER_PORT_FILE) -> int:
    lb_port_filepath = Path.cwd().joinpath(lb_port_filename)
    with lb_port_filepath.open('r') as lb_port_file:
        port = int(lb_port_file.readline())

    return port


def is_get_request(message):
    try:
        first_line_list = message.split(HTTP_LINE_END)[0].split()
        request_type = first_line_list[0]
    except:
        return False
    if request_type == 'GET':
        return True
    else:
        return False


def is_counter_endpoint(message):
    try:
        first_line_list = message.split(HTTP_LINE_END)[0].split()
        address = first_line_list[1]
    except:
        return False
    if address == '/counter':
        return True
    else:
        return False


def connect_socket(address: str, port: int) -> socket:
    try:
        client_socket = socket()
    except OSError as error:
        client_socket = None
        return client_socket

    try:
        client_socket.connect((address, port))
    except OSError as error:
        client_socket.close()
        client_socket = None
        return client_socket

    return client_socket


def recieve_message(lb_socket: socket) -> str:
    received_all = False
    chunks = []
    bytes_received = 0
    while not received_all:
        chunk = lb_socket.recv(RECEIVE_BUFFER_SIZE)
        if len(chunk) == 0:
            raise RuntimeError('socket connection broken')

        chunks.append(chunk)
        bytes_received = bytes_received + len(chunk)

        message = ''.join([x.decode('latin-1') for x in chunks])
        if message.endswith(HTTP_MESSAGE_END):
            received_all = True

    print(message)
    return message


def main():
    lb_port = get_lb_port(LOAD_BALANCER_PORT_FILE)

    lb_socket = connect_socket('localhost', lb_port)
    if lb_socket is None:
        print('Could not open socket.')
        sys.exit(1)

    requests_count = 0
    try:
        while True:
            message = recieve_message(lb_socket)
            if is_get_request(message) and is_counter_endpoint(message):
                requests_count = requests_count + 1
                response = format_counter_response(requests_count)
            else:
                response = format_error_response()
            lb_socket.send(response.encode())
    except:
        lb_socket.close

if __name__ == "__main__":
    main()
